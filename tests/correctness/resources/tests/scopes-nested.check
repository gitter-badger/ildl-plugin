newSource1.scala:23: warning: The new operator can be optimized if you define a public, non-overloaded and matching constructor method for it in object IntPairAsLong, with the name ctor_Tuple2.
      var n1 = (1, 0)
               ^
[[syntax trees at end of               ildl-commit]] // newSource1.scala
package test {
  object GCDTest extends Object {
    def <init>(): test.GCDTest.type = {
      GCDTest.super.<init>();
      ()
    };
    object IntPairAsLong extends Object with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntPairAsLong.type = {
        IntPairAsLong.super.<init>();
        ()
      };
      type High = (Int, Int);
      type Repr = Long;
      def toRepr(pair: (Int, Int)): Long = scala.this.Predef.???();
      def toHigh(l: Long @ildl.high): (Int, Int) = scala.this.Predef.???()
    };
    object IntAsLong extends Object with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntAsLong.type = {
        IntAsLong.super.<init>();
        ()
      };
      type High = Int;
      type Repr = Long;
      def toRepr(pair: Int): Long = scala.this.Predef.???();
      def toHigh(l: Long @ildl.high): Int = scala.this.Predef.???()
    };
    private[this] var n1: Long = GCDTest.this.IntPairAsLong.toRepr(new (Int, Int)(1, 0));
    @ildl.internal.nobridge <accessor> def n1(): Long = GCDTest.this.n1;
    @ildl.internal.nobridge <accessor> def n1_=(x$1: Long): Unit = GCDTest.this.n1 = x$1;
    private[this] var n2: Long = GCDTest.this.IntAsLong.toRepr(1);
    @ildl.internal.nobridge <accessor> def n2(): Long = GCDTest.this.n2;
    @ildl.internal.nobridge <accessor> def n2_=(x$1: Long): Unit = GCDTest.this.n2 = x$1;
    @ildl.internal.nobridge def foo(n1: Long, n2: Long): Long = GCDTest.this.IntAsLong.toRepr(scala.this.Predef.???())
  }
}