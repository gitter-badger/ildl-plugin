newSource1.scala:24: warning: Several `adrt` scopes can be applied here. The innermost will apply: GCDTest.this.IntPairAsFloat
        val n1 = (1, 0)
            ^
[[syntax trees at end of               ildl-inject]] // newSource1.scala
package test {
  import ildl._;
  object GCDTest extends scala.AnyRef {
    def <init>(): test.GCDTest.type = {
      GCDTest.super.<init>();
      ()
    };
    object IntPairAsLong extends AnyRef with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntPairAsLong.type = {
        IntPairAsLong.super.<init>();
        ()
      };
      type High = (Int, Int);
      type Repr = Long;
      def toRepr(pair: (Int, Int)): Long @ildl.high = scala.this.Predef.???;
      def toHigh(l: Long @ildl.high): (Int, Int) = scala.this.Predef.???
    };
    object IntPairAsFloat extends AnyRef with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntPairAsFloat.type = {
        IntPairAsFloat.super.<init>();
        ()
      };
      type High = (Int, Int);
      type Repr = Float;
      def toRepr(pair: (Int, Int)): Float @ildl.high = scala.this.Predef.???;
      def toHigh(l: Float @ildl.high): (Int, Int) = scala.this.Predef.???
    };
    def test(): (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong) = {
      val n1: (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsFloat) = scala.Tuple2.apply[Int, Int](1, 0);
      val n2: (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong) = scala.Tuple2.apply[Int, Int](2, 3);
      n1
    }
  }
}
newSource1.scala:24: warning: The new operator can be optimized if you define a public, non-overloaded and matching constructor method for it in object IntPairAsFloat, with the name ctor_Tuple2.
        val n1 = (1, 0)
                 ^
newSource1.scala:26: warning: The new operator can be optimized if you define a public, non-overloaded and matching constructor method for it in object IntPairAsLong, with the name ctor_Tuple2.
      val n2 = (2, 3)
               ^