newSource1.scala:23: warning: The method toString can be optimized if you define a public, non-overloaded and matching exension method for it in object IntPairAsFloat, with the name extension_toString.
    val s1 = n1.toString
                ^
newSource1.scala:28: warning: The method toString can be optimized if you define a public, non-overloaded and matching exension method for it in object IntPairAsLong, with the name extension_toString.
    val s2 = n2.toString
                ^
newSource1.scala:30: warning: The method toString can be optimized if you define a public, non-overloaded and matching exension method for it in object IntPairAsFloat, with the name extension_toString.
    val s3 = n1.toString
                ^
[[syntax trees at end of               ildl-coerce]] // newSource1.scala
package test {
  object GCDTest extends Object {
    def <init>(): test.GCDTest.type = {
      GCDTest.super.<init>();
      ()
    };
    object IntPairAsLong extends Object with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntPairAsLong.type = {
        IntPairAsLong.super.<init>();
        ()
      };
      type High = (Int, Int);
      type Repr = Long;
      def toRepr(pair: (Int, Int)): (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong) = scala.this.Predef.???();
      def toHigh(l: Long @ildl.high): (Int, Int) = scala.this.Predef.???()
    };
    object IntPairAsFloat extends Object with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntPairAsFloat.type = {
        IntPairAsFloat.super.<init>();
        ()
      };
      type High = (Int, Int);
      type Repr = Float;
      def toRepr(pair: (Int, Int)): (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsFloat) = scala.this.Predef.???();
      def toHigh(l: Float @ildl.high): (Int, Int) = scala.this.Predef.???()
    };
    private[this] val n1: (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsFloat) = GCDTest.this.IntPairAsFloat.toRepr(new (Int, Int)(1, 0));
    @ildl.internal.nobridge <stable> <accessor> def n1(): (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsFloat) = GCDTest.this.n1;
    private[this] val s1: String = GCDTest.this.IntPairAsFloat.toHigh(GCDTest.this.n1()).toString();
    <stable> <accessor> def s1(): String = GCDTest.this.s1;
    private[this] val a1: Any = GCDTest.this.IntPairAsFloat.toHigh(GCDTest.this.n1());
    <stable> <accessor> def a1(): Any = GCDTest.this.a1;
    private[this] val n2: (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong) = GCDTest.this.IntPairAsLong.toRepr(GCDTest.this.IntPairAsFloat.toHigh(GCDTest.this.n1()));
    @ildl.internal.nobridge <stable> <accessor> def n2(): (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong) = GCDTest.this.n2;
    private[this] val s2: String = GCDTest.this.IntPairAsLong.toHigh(GCDTest.this.n2()).toString();
    <stable> <accessor> def s2(): String = GCDTest.this.s2;
    private[this] val a2: Any = GCDTest.this.IntPairAsFloat.toHigh(GCDTest.this.n1());
    <stable> <accessor> def a2(): Any = GCDTest.this.a2;
    private[this] val s3: String = GCDTest.this.IntPairAsFloat.toHigh(GCDTest.this.n1()).toString();
    <stable> <accessor> def s3(): String = GCDTest.this.s3
  }
}