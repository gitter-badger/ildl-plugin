newSource1.scala:25: warning: The new operator can be optimized if you define a public, non-overloaded and matching constructor method for it in object IntPairAsLong, with the name ctor_Tuple2.
      val n1 = (1, 0)
               ^
[[syntax trees at end of               ildl-commit]] // newSource1.scala
package test {
  object GCDTest extends Object {
    def <init>(): test.GCDTest.type = {
      GCDTest.super.<init>();
      ()
    };
    object IntPairAsLong extends Object with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntPairAsLong.type = {
        IntPairAsLong.super.<init>();
        ()
      };
      type High = (Int, Int);
      type Repr = Long;
      def toRepr(pair: (Int, Int)): Long = scala.this.Predef.???();
      def toHigh(l: Long @ildl.high): (Int, Int) = scala.this.Predef.???()
    };
    object LongAsFloat extends Object with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.LongAsFloat.type = {
        LongAsFloat.super.<init>();
        ()
      };
      type High = Long;
      type Repr = Float;
      def toRepr(pair: Long): Float = scala.this.Predef.???();
      def toHigh(l: Float @ildl.high): Long = scala.this.Predef.???()
    };
    private[this] val n1: Long = GCDTest.this.IntPairAsLong.toRepr(new (Int, Int)(1, 0));
    @ildl.internal.nobridge <stable> <accessor> def n1(): Long = GCDTest.this.n1;
    private[this] val n3: Long = GCDTest.this.n1();
    @ildl.internal.nobridge <stable> <accessor> def n3(): Long = GCDTest.this.n3
  }
}