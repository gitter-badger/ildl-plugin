newSource1.scala:19: warning: The method toString can be optimized if you define a public, non-overloaded and matching exension method for it in object ListAsArray, with the name extension_toString.
    val c = a.toString
              ^
[[syntax trees at end of               ildl-commit]] // newSource1.scala
package tests {
  object Test extends Object {
    def <init>(): tests.Test.type = {
      Test.super.<init>();
      ()
    };
    object ListAsArray extends Object with ildl.TransformationDescription {
      def <init>(): tests.Test.ListAsArray.type = {
        ListAsArray.super.<init>();
        ()
      };
      def toRepr[T](list: List[T]): Array[T] = scala.this.Predef.???();
      def toHigh[T](arr: Array[T] @ildl.high): List[T] = scala.this.Predef.???();
      def extension_apply[T](recv: Array[T] @ildl.high, index: Int): T = scala.this.Predef.???();
      def extension_toString[T](recv: Array[T] @ildl.high): Long = scala.this.Predef.???()
    };
    private[this] val a: Array[Int] = Test.this.ListAsArray.toRepr[Int](immutable.this.List.apply[Int](scala.this.Predef.wrapIntArray(Array[Int]{1, 2, 3})));
    <stable> <accessor> def a(): Array[Int] = Test.this.a;
    private[this] val b: Int = Test.this.ListAsArray.extension_apply[Int](Test.this.a(), 2);
    <stable> <accessor> def b(): Int = Test.this.b;
    private[this] val c: String = Test.this.ListAsArray.toHigh[Int](Test.this.a()).toString();
    <stable> <accessor> def c(): String = Test.this.c
  }
}

[Now checking: ildl-commit]
