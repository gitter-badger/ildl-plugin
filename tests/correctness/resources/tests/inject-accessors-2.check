[[syntax trees at end of               ildl-inject]] // newSource1.scala
package test {
  import ildl._;
  object GCDTest extends scala.AnyRef {
    def <init>(): test.GCDTest.type = {
      GCDTest.super.<init>();
      ()
    };
    object IntPairAsLong extends AnyRef with ildl.RigidTransformationDescription {
      def <init>(): test.GCDTest.IntPairAsLong.type = {
        IntPairAsLong.super.<init>();
        ()
      };
      type High = (Int, Int);
      type Repr = Long;
      def toRepr(pair: (Int, Int)): Long @ildl.high = scala.this.Predef.???;
      def toHigh(l: Long @ildl.high): (Int, Int) = scala.this.Predef.???
    };
    private[this] var n1: (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong) = scala.Tuple2.apply[Int, Int](1, 2);
    <accessor> def n1: (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong) = GCDTest.this.n1;
    <accessor> def n1_=(x$1: (Int, Int) @ildl.internal.repr(GCDTest.this.IntPairAsLong)): Unit = GCDTest.this.n1 = x$1
  }
}
newSource1.scala:16: warning: The new operator can be optimized if you define a public, non-overloaded and matching constructor method for it in object IntPairAsLong, with the name ctor_Tuple2.
    var n1 = (1, 2)
             ^